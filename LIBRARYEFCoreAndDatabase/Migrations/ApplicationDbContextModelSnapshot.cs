// <auto-generated />
using System;
using LIBRARYEFCoreAndDatabase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LIBRARYEFCoreAndDatabase.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LIBRARYEFCoreAndDatabase.Models.Admin", b =>
                {
                    b.Property<int>("AID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AID"));

                    b.Property<string>("AEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Aname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Apassword")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("AID");

                    b.ToTable("Admines");
                });

            modelBuilder.Entity("LIBRARYEFCoreAndDatabase.Models.Book", b =>
                {
                    b.Property<int>("BID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BID"));

                    b.Property<string>("Bauthor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BorrTotalCopy")
                        .HasColumnType("int");

                    b.Property<int>("BorrowedCopies")
                        .HasColumnType("int");

                    b.Property<int>("CID")
                        .HasColumnType("int");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BID");

                    b.HasIndex("CID");

                    b.ToTable("Bookes");
                });

            modelBuilder.Entity("LIBRARYEFCoreAndDatabase.Models.BorrowingBook", b =>
                {
                    b.Property<int>("BID")
                        .HasColumnType("int");

                    b.Property<int>("UID")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ActualDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("BRdate")
                        .HasColumnType("date");

                    b.Property<bool>("IsReturen")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateOnly>("predictDate")
                        .HasColumnType("date");

                    b.HasKey("BID", "UID");

                    b.HasIndex("UID");

                    b.ToTable("BorrowingBookes");
                });

            modelBuilder.Entity("LIBRARYEFCoreAndDatabase.Models.Category", b =>
                {
                    b.Property<int>("CID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CID"));

                    b.Property<string>("Cname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfBooks")
                        .HasColumnType("int");

                    b.HasKey("CID");

                    b.ToTable("Categoryes");
                });

            modelBuilder.Entity("LIBRARYEFCoreAndDatabase.Models.User", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UID"));

                    b.Property<int>("Ugender")
                        .HasColumnType("int");

                    b.Property<string>("Uname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Upassword")
                        .HasMaxLength(8)
                        .HasColumnType("int");

                    b.HasKey("UID");

                    b.ToTable("Useres");
                });

            modelBuilder.Entity("LIBRARYEFCoreAndDatabase.Models.Book", b =>
                {
                    b.HasOne("LIBRARYEFCoreAndDatabase.Models.Category", "category")
                        .WithMany("Books")
                        .HasForeignKey("CID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");
                });

            modelBuilder.Entity("LIBRARYEFCoreAndDatabase.Models.BorrowingBook", b =>
                {
                    b.HasOne("LIBRARYEFCoreAndDatabase.Models.Book", "book")
                        .WithMany("BorrowingBooks")
                        .HasForeignKey("BID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LIBRARYEFCoreAndDatabase.Models.User", "user")
                        .WithMany("BorrowingBooks")
                        .HasForeignKey("UID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");

                    b.Navigation("user");
                });

            modelBuilder.Entity("LIBRARYEFCoreAndDatabase.Models.Book", b =>
                {
                    b.Navigation("BorrowingBooks");
                });

            modelBuilder.Entity("LIBRARYEFCoreAndDatabase.Models.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LIBRARYEFCoreAndDatabase.Models.User", b =>
                {
                    b.Navigation("BorrowingBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
